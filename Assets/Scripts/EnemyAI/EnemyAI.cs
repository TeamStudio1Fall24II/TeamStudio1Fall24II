using System.Data.Common;
using UnityEngine;
using UnityEngine.AI;

public class EnemyAI : MonoBehaviour, IDamageable
{
     [SerializeField]
     public EnemyDataSO Data;
     public EnemyAIBehavior CurrentBehavior;
     public Scan ScanBehavior;
     public Combat CombatBehavior;
     private NavMeshAgent navMeshAgent;

     private float FOVRaycastTimer = 0.0f;

     private GameObject Target;
     private bool isPlayerDetected = false;

     private int currentHealth;

     public enum State
     {
          Idle,
          Scan,
          Patrol,
          Investigate,
          Chase,
          Combat,
          Die
     }

     public State CurrentState;
     // Starts in this state and will return to this state if nothing else is going on.
     public State DefaultState;

     private void Awake()
     {
          Target = GameObject.Find("Player");

          navMeshAgent = GetComponent<NavMeshAgent>();

          ScanBehavior = new Scan(Data, navMeshAgent, gameObject);
          CombatBehavior = new Combat(Data, navMeshAgent, gameObject, Target);

          currentHealth = Data.m_HealthData.MaxHealth;
     }

     private void OnEnable()
     {
          CurrentState = DefaultState;
          switch (CurrentState)
          {
               case State.Idle:
                    // Do nothing
                    break;
               case State.Scan:
                    CurrentBehavior = ScanBehavior;
                    break;
               case State.Patrol:
                    break;
               case State.Investigate:
                    break;
               case State.Chase:
                    break;
               case State.Combat:
                    CurrentBehavior = CombatBehavior;
                    break;
               case State.Die:
                    break;
          }
     }

     // TODO: Eventually need to integrate animations
     // Update is called once per frame
     void Update()
    {
          CurrentBehavior.Tick();
          FOVDetect();
    }

     private void TransitionToCombat()
     {
          CurrentState = State.Combat;
          CurrentBehavior = CombatBehavior;
     }

     // FOVDetect partially generated by Gemini AI
     private void FOVDetect()
     {
          FOVRaycastTimer += Time.deltaTime;
          if(FOVRaycastTimer < Data.m_FOVData.RaycastTime) { return; }
          FOVRaycastTimer = 0.0f;

          // Current assumption that there is only 1 target, if it is already acquired, no need to detect
          if(isPlayerDetected) { return; }

          Vector3 directionToTarget = (Target.transform.position - transform.position).normalized;
          float angleBetweenTargetAndForward = Vector3.Angle(transform.forward, directionToTarget);

          if (angleBetweenTargetAndForward < Data.m_FOVData.FieldOfViewAngle / 2)
          {
               RaycastHit hit;
               if (Physics.Raycast(transform.position, directionToTarget, out hit, Data.m_FOVData.ViewDistance))
               {
                    if (hit.collider.CompareTag("Player"))
                    {
                         isPlayerDetected = true;
                         TransitionToCombat();
                    }
               }
          }
     }

     public void TakeDamage(int damage)
     {
          Debug.Log("I've been hit! " + damage + " Damage");
          currentHealth -= damage;
          if (currentHealth <= 0)
          {
               // TODO: implement death
               Debug.Log("Enemy has 0 health. They should be dead");
               currentHealth = Data.m_HealthData.MaxHealth;
          }
     }

}



